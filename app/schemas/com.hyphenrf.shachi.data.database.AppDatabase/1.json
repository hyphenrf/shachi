{
  "formatVersion": 1,
  "database": {
    "version": 1,
    "identityHash": "8fb50e1ac1c8e61a073eff8166a6ee95",
    "entities": [
      {
        "tableName": "server",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`server_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `type` TEXT NOT NULL, `title` TEXT NOT NULL, `url` TEXT NOT NULL, `username` TEXT, `password` TEXT)",
        "fields": [
          {
            "fieldPath": "serverId",
            "columnName": "server_id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "type",
            "columnName": "type",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "title",
            "columnName": "title",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "url",
            "columnName": "url",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "username",
            "columnName": "username",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "password",
            "columnName": "password",
            "affinity": "TEXT",
            "notNull": false
          }
        ],
        "primaryKey": {
          "columnNames": [
            "server_id"
          ],
          "autoGenerate": true
        },
        "indices": [
          {
            "name": "index_server_url",
            "unique": true,
            "columnNames": [
              "url"
            ],
            "orders": [],
            "createSql": "CREATE UNIQUE INDEX IF NOT EXISTS `index_server_url` ON `${TABLE_NAME}` (`url`)"
          }
        ],
        "foreignKeys": []
      },
      {
        "tableName": "selected_server",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`selected_server_id` INTEGER NOT NULL, `server_id` INTEGER NOT NULL, PRIMARY KEY(`selected_server_id`), FOREIGN KEY(`server_id`) REFERENCES `server`(`server_id`) ON UPDATE CASCADE ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "selectedServerId",
            "columnName": "selected_server_id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "serverId",
            "columnName": "server_id",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "selected_server_id"
          ],
          "autoGenerate": false
        },
        "indices": [
          {
            "name": "index_selected_server_server_id",
            "unique": false,
            "columnNames": [
              "server_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_selected_server_server_id` ON `${TABLE_NAME}` (`server_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "server",
            "onDelete": "CASCADE",
            "onUpdate": "CASCADE",
            "columns": [
              "server_id"
            ],
            "referencedColumns": [
              "server_id"
            ]
          }
        ]
      },
      {
        "tableName": "favorite",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`height` INTEGER NOT NULL, `width` INTEGER NOT NULL, `score` INTEGER, `file_url` TEXT NOT NULL, `parent_id` INTEGER, `sample_url` TEXT, `sample_width` INTEGER, `sample_height` INTEGER, `preview_url` TEXT, `preview_width` INTEGER, `preview_height` INTEGER, `rating` TEXT NOT NULL, `tags` TEXT NOT NULL, `post_id` INTEGER NOT NULL, `server_id` INTEGER NOT NULL, `change` INTEGER NOT NULL, `md5` TEXT NOT NULL, `creator_id` INTEGER, `has_children` INTEGER NOT NULL, `created_at` TEXT, `status` TEXT NOT NULL, `source` TEXT NOT NULL, `has_notes` INTEGER NOT NULL, `has_comments` INTEGER NOT NULL, `post_url` TEXT NOT NULL, `date_added` INTEGER DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY(`server_id`, `post_id`), FOREIGN KEY(`server_id`) REFERENCES `server`(`server_id`) ON UPDATE CASCADE ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "height",
            "columnName": "height",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "width",
            "columnName": "width",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "score",
            "columnName": "score",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "fileUrl",
            "columnName": "file_url",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "parentId",
            "columnName": "parent_id",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "sampleUrl",
            "columnName": "sample_url",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "sampleWidth",
            "columnName": "sample_width",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "sampleHeight",
            "columnName": "sample_height",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "previewUrl",
            "columnName": "preview_url",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "previewWidth",
            "columnName": "preview_width",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "previewHeight",
            "columnName": "preview_height",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "rating",
            "columnName": "rating",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "tags",
            "columnName": "tags",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "postId",
            "columnName": "post_id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "serverId",
            "columnName": "server_id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "change",
            "columnName": "change",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "md5",
            "columnName": "md5",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "creatorId",
            "columnName": "creator_id",
            "affinity": "INTEGER",
            "notNull": false
          },
          {
            "fieldPath": "hasChildren",
            "columnName": "has_children",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "createdAt",
            "columnName": "created_at",
            "affinity": "TEXT",
            "notNull": false
          },
          {
            "fieldPath": "status",
            "columnName": "status",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "source",
            "columnName": "source",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "hasNotes",
            "columnName": "has_notes",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "hasComments",
            "columnName": "has_comments",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "postUrl",
            "columnName": "post_url",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "dateAdded",
            "columnName": "date_added",
            "affinity": "INTEGER",
            "notNull": false,
            "defaultValue": "CURRENT_TIMESTAMP"
          }
        ],
        "primaryKey": {
          "columnNames": [
            "server_id",
            "post_id"
          ],
          "autoGenerate": false
        },
        "indices": [],
        "foreignKeys": [
          {
            "table": "server",
            "onDelete": "CASCADE",
            "onUpdate": "CASCADE",
            "columns": [
              "server_id"
            ],
            "referencedColumns": [
              "server_id"
            ]
          }
        ]
      },
      {
        "tableName": "saved_search",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`saved_search_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `tags` TEXT NOT NULL, `saved_search_title` TEXT NOT NULL, `server_id` INTEGER NOT NULL, `saved_search_order` INTEGER NOT NULL, `date_added` INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY(`server_id`) REFERENCES `server`(`server_id`) ON UPDATE CASCADE ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "savedSearchId",
            "columnName": "saved_search_id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "tags",
            "columnName": "tags",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "savedSearchTitle",
            "columnName": "saved_search_title",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "serverId",
            "columnName": "server_id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "order",
            "columnName": "saved_search_order",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "dateAdded",
            "columnName": "date_added",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "CURRENT_TIMESTAMP"
          }
        ],
        "primaryKey": {
          "columnNames": [
            "saved_search_id"
          ],
          "autoGenerate": true
        },
        "indices": [
          {
            "name": "index_saved_search_server_id",
            "unique": false,
            "columnNames": [
              "server_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_saved_search_server_id` ON `${TABLE_NAME}` (`server_id`)"
          },
          {
            "name": "index_saved_search_tags_saved_search_title_server_id",
            "unique": true,
            "columnNames": [
              "tags",
              "saved_search_title",
              "server_id"
            ],
            "orders": [],
            "createSql": "CREATE UNIQUE INDEX IF NOT EXISTS `index_saved_search_tags_saved_search_title_server_id` ON `${TABLE_NAME}` (`tags`, `saved_search_title`, `server_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "server",
            "onDelete": "CASCADE",
            "onUpdate": "CASCADE",
            "columns": [
              "server_id"
            ],
            "referencedColumns": [
              "server_id"
            ]
          }
        ]
      },
      {
        "tableName": "blacklisted_tag",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`blacklisted_tag_id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `tags` TEXT NOT NULL)",
        "fields": [
          {
            "fieldPath": "blacklistedTagId",
            "columnName": "blacklisted_tag_id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "tags",
            "columnName": "tags",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "blacklisted_tag_id"
          ],
          "autoGenerate": true
        },
        "indices": [],
        "foreignKeys": []
      },
      {
        "tableName": "server_blacklisted_tag_cross_ref",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`server_id` INTEGER NOT NULL, `blacklisted_tag_id` INTEGER NOT NULL, PRIMARY KEY(`server_id`, `blacklisted_tag_id`), FOREIGN KEY(`blacklisted_tag_id`) REFERENCES `blacklisted_tag`(`blacklisted_tag_id`) ON UPDATE CASCADE ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "serverId",
            "columnName": "server_id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "blacklistedTagId",
            "columnName": "blacklisted_tag_id",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "server_id",
            "blacklisted_tag_id"
          ],
          "autoGenerate": false
        },
        "indices": [
          {
            "name": "index_server_blacklisted_tag_cross_ref_blacklisted_tag_id",
            "unique": false,
            "columnNames": [
              "blacklisted_tag_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_server_blacklisted_tag_cross_ref_blacklisted_tag_id` ON `${TABLE_NAME}` (`blacklisted_tag_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "blacklisted_tag",
            "onDelete": "CASCADE",
            "onUpdate": "CASCADE",
            "columns": [
              "blacklisted_tag_id"
            ],
            "referencedColumns": [
              "blacklisted_tag_id"
            ]
          }
        ]
      },
      {
        "ftsVersion": "FTS4",
        "ftsOptions": {
          "tokenizer": "unicode61",
          "tokenizerArgs": [
            "tokenchars='"
          ],
          "contentTable": "",
          "languageIdColumnName": "",
          "matchInfo": "FTS4",
          "notIndexedColumns": [],
          "prefixSizes": [],
          "preferredOrder": "ASC"
        },
        "contentSyncTriggers": [],
        "tableName": "post_tag",
        "createSql": "CREATE VIRTUAL TABLE IF NOT EXISTS `${TABLE_NAME}` USING FTS4(`post_id` INTEGER NOT NULL, `server_id` INTEGER NOT NULL, `tags` TEXT NOT NULL, tokenize=unicode61 `tokenchars='`)",
        "fields": [
          {
            "fieldPath": "postId",
            "columnName": "post_id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "serverId",
            "columnName": "server_id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "tags",
            "columnName": "tags",
            "affinity": "TEXT",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [],
          "autoGenerate": false
        },
        "indices": [],
        "foreignKeys": []
      },
      {
        "tableName": "tag",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`name` TEXT NOT NULL, `type` TEXT NOT NULL, `server_id` INTEGER NOT NULL, PRIMARY KEY(`name`, `server_id`), FOREIGN KEY(`server_id`) REFERENCES `server`(`server_id`) ON UPDATE CASCADE ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "name",
            "columnName": "name",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "type",
            "columnName": "type",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "serverId",
            "columnName": "server_id",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "name",
            "server_id"
          ],
          "autoGenerate": false
        },
        "indices": [
          {
            "name": "index_tag_server_id",
            "unique": false,
            "columnNames": [
              "server_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_tag_server_id` ON `${TABLE_NAME}` (`server_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "server",
            "onDelete": "CASCADE",
            "onUpdate": "CASCADE",
            "columns": [
              "server_id"
            ],
            "referencedColumns": [
              "server_id"
            ]
          }
        ]
      },
      {
        "tableName": "search_history",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`searchHistoryId` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `server_id` INTEGER NOT NULL, `tags` TEXT NOT NULL, `created_at` INTEGER NOT NULL, FOREIGN KEY(`server_id`) REFERENCES `server`(`server_id`) ON UPDATE CASCADE ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "searchHistoryId",
            "columnName": "searchHistoryId",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "serverId",
            "columnName": "server_id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "tags",
            "columnName": "tags",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "createdAt",
            "columnName": "created_at",
            "affinity": "INTEGER",
            "notNull": true
          }
        ],
        "primaryKey": {
          "columnNames": [
            "searchHistoryId"
          ],
          "autoGenerate": true
        },
        "indices": [
          {
            "name": "index_search_history_tags_server_id",
            "unique": true,
            "columnNames": [
              "tags",
              "server_id"
            ],
            "orders": [],
            "createSql": "CREATE UNIQUE INDEX IF NOT EXISTS `index_search_history_tags_server_id` ON `${TABLE_NAME}` (`tags`, `server_id`)"
          },
          {
            "name": "index_search_history_server_id",
            "unique": false,
            "columnNames": [
              "server_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_search_history_server_id` ON `${TABLE_NAME}` (`server_id`)"
          },
          {
            "name": "index_search_history_created_at",
            "unique": false,
            "columnNames": [
              "created_at"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_search_history_created_at` ON `${TABLE_NAME}` (`created_at`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "server",
            "onDelete": "CASCADE",
            "onUpdate": "CASCADE",
            "columns": [
              "server_id"
            ],
            "referencedColumns": [
              "server_id"
            ]
          }
        ]
      }
    ],
    "views": [
      {
        "viewName": "server_view",
        "createSql": "CREATE VIEW `${VIEW_NAME}` AS SELECT server.*, selected_server.server_id IS NOT NULL AS selected, GROUP_CONCAT(blacklisted_tag.tags, ',') AS blacklisted_tags FROM server LEFT JOIN selected_server ON server.server_id = selected_server.server_id LEFT JOIN server_blacklisted_tag_cross_ref ON server.server_id = server_blacklisted_tag_cross_ref.server_id LEFT JOIN blacklisted_tag ON server_blacklisted_tag_cross_ref.blacklisted_tag_id = blacklisted_tag.blacklisted_tag_id GROUP BY server.server_id"
      }
    ],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '8fb50e1ac1c8e61a073eff8166a6ee95')"
    ]
  }
}